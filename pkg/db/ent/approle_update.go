// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approle"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppRoleUpdate is the builder for updating AppRole entities.
type AppRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AppRoleMutation
}

// Where appends a list predicates to the AppRoleUpdate builder.
func (aru *AppRoleUpdate) Where(ps ...predicate.AppRole) *AppRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetCreatedBy sets the "created_by" field.
func (aru *AppRoleUpdate) SetCreatedBy(u uuid.UUID) *AppRoleUpdate {
	aru.mutation.SetCreatedBy(u)
	return aru
}

// SetRole sets the "role" field.
func (aru *AppRoleUpdate) SetRole(s string) *AppRoleUpdate {
	aru.mutation.SetRole(s)
	return aru
}

// SetDescription sets the "description" field.
func (aru *AppRoleUpdate) SetDescription(s string) *AppRoleUpdate {
	aru.mutation.SetDescription(s)
	return aru
}

// SetAppID sets the "app_id" field.
func (aru *AppRoleUpdate) SetAppID(u uuid.UUID) *AppRoleUpdate {
	aru.mutation.SetAppID(u)
	return aru
}

// SetDefault sets the "default" field.
func (aru *AppRoleUpdate) SetDefault(b bool) *AppRoleUpdate {
	aru.mutation.SetDefault(b)
	return aru
}

// SetCreateAt sets the "create_at" field.
func (aru *AppRoleUpdate) SetCreateAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetCreateAt()
	aru.mutation.SetCreateAt(u)
	return aru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableCreateAt(u *uint32) *AppRoleUpdate {
	if u != nil {
		aru.SetCreateAt(*u)
	}
	return aru
}

// AddCreateAt adds u to the "create_at" field.
func (aru *AppRoleUpdate) AddCreateAt(u int32) *AppRoleUpdate {
	aru.mutation.AddCreateAt(u)
	return aru
}

// SetUpdateAt sets the "update_at" field.
func (aru *AppRoleUpdate) SetUpdateAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetUpdateAt()
	aru.mutation.SetUpdateAt(u)
	return aru
}

// AddUpdateAt adds u to the "update_at" field.
func (aru *AppRoleUpdate) AddUpdateAt(u int32) *AppRoleUpdate {
	aru.mutation.AddUpdateAt(u)
	return aru
}

// SetDeleteAt sets the "delete_at" field.
func (aru *AppRoleUpdate) SetDeleteAt(u uint32) *AppRoleUpdate {
	aru.mutation.ResetDeleteAt()
	aru.mutation.SetDeleteAt(u)
	return aru
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableDeleteAt(u *uint32) *AppRoleUpdate {
	if u != nil {
		aru.SetDeleteAt(*u)
	}
	return aru
}

// AddDeleteAt adds u to the "delete_at" field.
func (aru *AppRoleUpdate) AddDeleteAt(u int32) *AppRoleUpdate {
	aru.mutation.AddDeleteAt(u)
	return aru
}

// Mutation returns the AppRoleMutation object of the builder.
func (aru *AppRoleUpdate) Mutation() *AppRoleMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aru.defaults()
	if len(aru.hooks) == 0 {
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AppRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdateAt(); !ok {
		v := approle.UpdateDefaultUpdateAt()
		aru.mutation.SetUpdateAt(v)
	}
}

func (aru *AppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approle.Table,
			Columns: approle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approle.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approle.FieldCreatedBy,
		})
	}
	if value, ok := aru.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approle.FieldRole,
		})
	}
	if value, ok := aru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approle.FieldDescription,
		})
	}
	if value, ok := aru.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approle.FieldAppID,
		})
	}
	if value, ok := aru.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: approle.FieldDefault,
		})
	}
	if value, ok := aru.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldCreateAt,
		})
	}
	if value, ok := aru.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldCreateAt,
		})
	}
	if value, ok := aru.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldUpdateAt,
		})
	}
	if value, ok := aru.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldUpdateAt,
		})
	}
	if value, ok := aru.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldDeleteAt,
		})
	}
	if value, ok := aru.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppRoleUpdateOne is the builder for updating a single AppRole entity.
type AppRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppRoleMutation
}

// SetCreatedBy sets the "created_by" field.
func (aruo *AppRoleUpdateOne) SetCreatedBy(u uuid.UUID) *AppRoleUpdateOne {
	aruo.mutation.SetCreatedBy(u)
	return aruo
}

// SetRole sets the "role" field.
func (aruo *AppRoleUpdateOne) SetRole(s string) *AppRoleUpdateOne {
	aruo.mutation.SetRole(s)
	return aruo
}

// SetDescription sets the "description" field.
func (aruo *AppRoleUpdateOne) SetDescription(s string) *AppRoleUpdateOne {
	aruo.mutation.SetDescription(s)
	return aruo
}

// SetAppID sets the "app_id" field.
func (aruo *AppRoleUpdateOne) SetAppID(u uuid.UUID) *AppRoleUpdateOne {
	aruo.mutation.SetAppID(u)
	return aruo
}

// SetDefault sets the "default" field.
func (aruo *AppRoleUpdateOne) SetDefault(b bool) *AppRoleUpdateOne {
	aruo.mutation.SetDefault(b)
	return aruo
}

// SetCreateAt sets the "create_at" field.
func (aruo *AppRoleUpdateOne) SetCreateAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetCreateAt()
	aruo.mutation.SetCreateAt(u)
	return aruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableCreateAt(u *uint32) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetCreateAt(*u)
	}
	return aruo
}

// AddCreateAt adds u to the "create_at" field.
func (aruo *AppRoleUpdateOne) AddCreateAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddCreateAt(u)
	return aruo
}

// SetUpdateAt sets the "update_at" field.
func (aruo *AppRoleUpdateOne) SetUpdateAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetUpdateAt()
	aruo.mutation.SetUpdateAt(u)
	return aruo
}

// AddUpdateAt adds u to the "update_at" field.
func (aruo *AppRoleUpdateOne) AddUpdateAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddUpdateAt(u)
	return aruo
}

// SetDeleteAt sets the "delete_at" field.
func (aruo *AppRoleUpdateOne) SetDeleteAt(u uint32) *AppRoleUpdateOne {
	aruo.mutation.ResetDeleteAt()
	aruo.mutation.SetDeleteAt(u)
	return aruo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableDeleteAt(u *uint32) *AppRoleUpdateOne {
	if u != nil {
		aruo.SetDeleteAt(*u)
	}
	return aruo
}

// AddDeleteAt adds u to the "delete_at" field.
func (aruo *AppRoleUpdateOne) AddDeleteAt(u int32) *AppRoleUpdateOne {
	aruo.mutation.AddDeleteAt(u)
	return aruo
}

// Mutation returns the AppRoleMutation object of the builder.
func (aruo *AppRoleUpdateOne) Mutation() *AppRoleMutation {
	return aruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AppRoleUpdateOne) Select(field string, fields ...string) *AppRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AppRole entity.
func (aruo *AppRoleUpdateOne) Save(ctx context.Context) (*AppRole, error) {
	var (
		err  error
		node *AppRole
	)
	aruo.defaults()
	if len(aruo.hooks) == 0 {
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) SaveX(ctx context.Context) *AppRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AppRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdateAt(); !ok {
		v := approle.UpdateDefaultUpdateAt()
		aruo.mutation.SetUpdateAt(v)
	}
}

func (aruo *AppRoleUpdateOne) sqlSave(ctx context.Context) (_node *AppRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approle.Table,
			Columns: approle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approle.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approle.FieldID)
		for _, f := range fields {
			if !approle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approle.FieldCreatedBy,
		})
	}
	if value, ok := aruo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approle.FieldRole,
		})
	}
	if value, ok := aruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: approle.FieldDescription,
		})
	}
	if value, ok := aruo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approle.FieldAppID,
		})
	}
	if value, ok := aruo.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: approle.FieldDefault,
		})
	}
	if value, ok := aruo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldCreateAt,
		})
	}
	if value, ok := aruo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldCreateAt,
		})
	}
	if value, ok := aruo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldUpdateAt,
		})
	}
	if value, ok := aruo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldUpdateAt,
		})
	}
	if value, ok := aruo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldDeleteAt,
		})
	}
	if value, ok := aruo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approle.FieldDeleteAt,
		})
	}
	_node = &AppRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
