// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appusercontrol"
	"github.com/google/uuid"
)

// AppUserControl is the model entity for the AppUserControl schema.
type AppUserControl struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
	// SigninVerifyByGoogleAuthentication holds the value of the "signin_verify_by_google_authentication" field.
	SigninVerifyByGoogleAuthentication bool `json:"signin_verify_by_google_authentication,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserControl) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appusercontrol.FieldSigninVerifyByGoogleAuthentication:
			values[i] = new(sql.NullBool)
		case appusercontrol.FieldCreateAt, appusercontrol.FieldUpdateAt, appusercontrol.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appusercontrol.FieldID, appusercontrol.FieldAppID, appusercontrol.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserControl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserControl fields.
func (auc *AppUserControl) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appusercontrol.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				auc.ID = *value
			}
		case appusercontrol.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				auc.AppID = *value
			}
		case appusercontrol.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				auc.UserID = *value
			}
		case appusercontrol.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				auc.CreateAt = uint32(value.Int64)
			}
		case appusercontrol.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				auc.UpdateAt = uint32(value.Int64)
			}
		case appusercontrol.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				auc.DeleteAt = uint32(value.Int64)
			}
		case appusercontrol.FieldSigninVerifyByGoogleAuthentication:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field signin_verify_by_google_authentication", values[i])
			} else if value.Valid {
				auc.SigninVerifyByGoogleAuthentication = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserControl.
// Note that you need to call AppUserControl.Unwrap() before calling this method if this AppUserControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (auc *AppUserControl) Update() *AppUserControlUpdateOne {
	return (&AppUserControlClient{config: auc.config}).UpdateOne(auc)
}

// Unwrap unwraps the AppUserControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (auc *AppUserControl) Unwrap() *AppUserControl {
	tx, ok := auc.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserControl is not a transactional entity")
	}
	auc.config.driver = tx.drv
	return auc
}

// String implements the fmt.Stringer.
func (auc *AppUserControl) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserControl(")
	builder.WriteString(fmt.Sprintf("id=%v", auc.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", auc.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", auc.UserID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", auc.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", auc.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", auc.DeleteAt))
	builder.WriteString(", signin_verify_by_google_authentication=")
	builder.WriteString(fmt.Sprintf("%v", auc.SigninVerifyByGoogleAuthentication))
	builder.WriteByte(')')
	return builder.String()
}

// AppUserControls is a parsable slice of AppUserControl.
type AppUserControls []*AppUserControl

func (auc AppUserControls) config(cfg config) {
	for _i := range auc {
		auc[_i].config = cfg
	}
}
