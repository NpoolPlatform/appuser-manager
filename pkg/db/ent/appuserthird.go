// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserthird"
	"github.com/google/uuid"
)

// AppUserThird is the model entity for the AppUserThird schema.
type AppUserThird struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ThirdUserID holds the value of the "third_user_id" field.
	ThirdUserID string `json:"third_user_id,omitempty"`
	// Third holds the value of the "third" field.
	Third string `json:"third,omitempty"`
	// ThirdID holds the value of the "third_id" field.
	ThirdID string `json:"third_id,omitempty"`
	// ThirdUserName holds the value of the "third_user_name" field.
	ThirdUserName string `json:"third_user_name,omitempty"`
	// ThirdUserAvatar holds the value of the "third_user_avatar" field.
	ThirdUserAvatar string `json:"third_user_avatar,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserThird) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuserthird.FieldCreateAt, appuserthird.FieldUpdateAt, appuserthird.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appuserthird.FieldThirdUserID, appuserthird.FieldThird, appuserthird.FieldThirdID, appuserthird.FieldThirdUserName, appuserthird.FieldThirdUserAvatar:
			values[i] = new(sql.NullString)
		case appuserthird.FieldID, appuserthird.FieldAppID, appuserthird.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserThird", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserThird fields.
func (aut *AppUserThird) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuserthird.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aut.ID = *value
			}
		case appuserthird.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				aut.CreateAt = uint32(value.Int64)
			}
		case appuserthird.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				aut.UpdateAt = uint32(value.Int64)
			}
		case appuserthird.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				aut.DeleteAt = uint32(value.Int64)
			}
		case appuserthird.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				aut.AppID = *value
			}
		case appuserthird.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				aut.UserID = *value
			}
		case appuserthird.FieldThirdUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_user_id", values[i])
			} else if value.Valid {
				aut.ThirdUserID = value.String
			}
		case appuserthird.FieldThird:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third", values[i])
			} else if value.Valid {
				aut.Third = value.String
			}
		case appuserthird.FieldThirdID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_id", values[i])
			} else if value.Valid {
				aut.ThirdID = value.String
			}
		case appuserthird.FieldThirdUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_user_name", values[i])
			} else if value.Valid {
				aut.ThirdUserName = value.String
			}
		case appuserthird.FieldThirdUserAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_user_avatar", values[i])
			} else if value.Valid {
				aut.ThirdUserAvatar = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserThird.
// Note that you need to call AppUserThird.Unwrap() before calling this method if this AppUserThird
// was returned from a transaction, and the transaction was committed or rolled back.
func (aut *AppUserThird) Update() *AppUserThirdUpdateOne {
	return (&AppUserThirdClient{config: aut.config}).UpdateOne(aut)
}

// Unwrap unwraps the AppUserThird entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aut *AppUserThird) Unwrap() *AppUserThird {
	tx, ok := aut.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserThird is not a transactional entity")
	}
	aut.config.driver = tx.drv
	return aut
}

// String implements the fmt.Stringer.
func (aut *AppUserThird) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserThird(")
	builder.WriteString(fmt.Sprintf("id=%v", aut.ID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", aut.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", aut.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", aut.DeleteAt))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", aut.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", aut.UserID))
	builder.WriteString(", third_user_id=")
	builder.WriteString(aut.ThirdUserID)
	builder.WriteString(", third=")
	builder.WriteString(aut.Third)
	builder.WriteString(", third_id=")
	builder.WriteString(aut.ThirdID)
	builder.WriteString(", third_user_name=")
	builder.WriteString(aut.ThirdUserName)
	builder.WriteString(", third_user_avatar=")
	builder.WriteString(aut.ThirdUserAvatar)
	builder.WriteByte(')')
	return builder.String()
}

// AppUserThirds is a parsable slice of AppUserThird.
type AppUserThirds []*AppUserThird

func (aut AppUserThirds) config(cfg config) {
	for _i := range aut {
		aut[_i].config = cfg
	}
}
