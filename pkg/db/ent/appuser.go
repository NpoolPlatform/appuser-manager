// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuser"
	"github.com/google/uuid"
)

// AppUser is the model entity for the AppUser schema.
type AppUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// EmailAddress holds the value of the "email_address" field.
	EmailAddress string `json:"email_address,omitempty"`
	// PhoneNo holds the value of the "phone_no" field.
	PhoneNo string `json:"phone_no,omitempty"`
	// ImportFromApp holds the value of the "import_from_app" field.
	ImportFromApp uuid.UUID `json:"import_from_app,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuser.FieldCreateAt, appuser.FieldUpdateAt, appuser.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appuser.FieldEmailAddress, appuser.FieldPhoneNo:
			values[i] = new(sql.NullString)
		case appuser.FieldID, appuser.FieldAppID, appuser.FieldImportFromApp:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUser fields.
func (au *AppUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case appuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				au.AppID = *value
			}
		case appuser.FieldEmailAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_address", values[i])
			} else if value.Valid {
				au.EmailAddress = value.String
			}
		case appuser.FieldPhoneNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_no", values[i])
			} else if value.Valid {
				au.PhoneNo = value.String
			}
		case appuser.FieldImportFromApp:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field import_from_app", values[i])
			} else if value != nil {
				au.ImportFromApp = *value
			}
		case appuser.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				au.CreateAt = uint32(value.Int64)
			}
		case appuser.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				au.UpdateAt = uint32(value.Int64)
			}
		case appuser.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				au.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUser.
// Note that you need to call AppUser.Unwrap() before calling this method if this AppUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AppUser) Update() *AppUserUpdateOne {
	return (&AppUserClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the AppUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AppUser) Unwrap() *AppUser {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUser is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AppUser) String() string {
	var builder strings.Builder
	builder.WriteString("AppUser(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", au.AppID))
	builder.WriteString(", email_address=")
	builder.WriteString(au.EmailAddress)
	builder.WriteString(", phone_no=")
	builder.WriteString(au.PhoneNo)
	builder.WriteString(", import_from_app=")
	builder.WriteString(fmt.Sprintf("%v", au.ImportFromApp))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", au.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppUsers is a parsable slice of AppUser.
type AppUsers []*AppUser

func (au AppUsers) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
