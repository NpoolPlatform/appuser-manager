// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/genesisuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GenesisUserUpdate is the builder for updating GenesisUser entities.
type GenesisUserUpdate struct {
	config
	hooks    []Hook
	mutation *GenesisUserMutation
}

// Where appends a list predicates to the GenesisUserUpdate builder.
func (guu *GenesisUserUpdate) Where(ps ...predicate.GenesisUser) *GenesisUserUpdate {
	guu.mutation.Where(ps...)
	return guu
}

// SetUserID sets the "user_id" field.
func (guu *GenesisUserUpdate) SetUserID(u uuid.UUID) *GenesisUserUpdate {
	guu.mutation.SetUserID(u)
	return guu
}

// SetCreateAt sets the "create_at" field.
func (guu *GenesisUserUpdate) SetCreateAt(u uint32) *GenesisUserUpdate {
	guu.mutation.ResetCreateAt()
	guu.mutation.SetCreateAt(u)
	return guu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (guu *GenesisUserUpdate) SetNillableCreateAt(u *uint32) *GenesisUserUpdate {
	if u != nil {
		guu.SetCreateAt(*u)
	}
	return guu
}

// AddCreateAt adds u to the "create_at" field.
func (guu *GenesisUserUpdate) AddCreateAt(u int32) *GenesisUserUpdate {
	guu.mutation.AddCreateAt(u)
	return guu
}

// SetUpdateAt sets the "update_at" field.
func (guu *GenesisUserUpdate) SetUpdateAt(u uint32) *GenesisUserUpdate {
	guu.mutation.ResetUpdateAt()
	guu.mutation.SetUpdateAt(u)
	return guu
}

// AddUpdateAt adds u to the "update_at" field.
func (guu *GenesisUserUpdate) AddUpdateAt(u int32) *GenesisUserUpdate {
	guu.mutation.AddUpdateAt(u)
	return guu
}

// SetDeleteAt sets the "delete_at" field.
func (guu *GenesisUserUpdate) SetDeleteAt(u uint32) *GenesisUserUpdate {
	guu.mutation.ResetDeleteAt()
	guu.mutation.SetDeleteAt(u)
	return guu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (guu *GenesisUserUpdate) SetNillableDeleteAt(u *uint32) *GenesisUserUpdate {
	if u != nil {
		guu.SetDeleteAt(*u)
	}
	return guu
}

// AddDeleteAt adds u to the "delete_at" field.
func (guu *GenesisUserUpdate) AddDeleteAt(u int32) *GenesisUserUpdate {
	guu.mutation.AddDeleteAt(u)
	return guu
}

// Mutation returns the GenesisUserMutation object of the builder.
func (guu *GenesisUserUpdate) Mutation() *GenesisUserMutation {
	return guu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (guu *GenesisUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	guu.defaults()
	if len(guu.hooks) == 0 {
		affected, err = guu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenesisUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guu.mutation = mutation
			affected, err = guu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(guu.hooks) - 1; i >= 0; i-- {
			if guu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GenesisUserUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GenesisUserUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GenesisUserUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guu *GenesisUserUpdate) defaults() {
	if _, ok := guu.mutation.UpdateAt(); !ok {
		v := genesisuser.UpdateDefaultUpdateAt()
		guu.mutation.SetUpdateAt(v)
	}
}

func (guu *GenesisUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   genesisuser.Table,
			Columns: genesisuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: genesisuser.FieldID,
			},
		},
	}
	if ps := guu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: genesisuser.FieldUserID,
		})
	}
	if value, ok := guu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldCreateAt,
		})
	}
	if value, ok := guu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldCreateAt,
		})
	}
	if value, ok := guu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldUpdateAt,
		})
	}
	if value, ok := guu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldUpdateAt,
		})
	}
	if value, ok := guu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldDeleteAt,
		})
	}
	if value, ok := guu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genesisuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GenesisUserUpdateOne is the builder for updating a single GenesisUser entity.
type GenesisUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GenesisUserMutation
}

// SetUserID sets the "user_id" field.
func (guuo *GenesisUserUpdateOne) SetUserID(u uuid.UUID) *GenesisUserUpdateOne {
	guuo.mutation.SetUserID(u)
	return guuo
}

// SetCreateAt sets the "create_at" field.
func (guuo *GenesisUserUpdateOne) SetCreateAt(u uint32) *GenesisUserUpdateOne {
	guuo.mutation.ResetCreateAt()
	guuo.mutation.SetCreateAt(u)
	return guuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (guuo *GenesisUserUpdateOne) SetNillableCreateAt(u *uint32) *GenesisUserUpdateOne {
	if u != nil {
		guuo.SetCreateAt(*u)
	}
	return guuo
}

// AddCreateAt adds u to the "create_at" field.
func (guuo *GenesisUserUpdateOne) AddCreateAt(u int32) *GenesisUserUpdateOne {
	guuo.mutation.AddCreateAt(u)
	return guuo
}

// SetUpdateAt sets the "update_at" field.
func (guuo *GenesisUserUpdateOne) SetUpdateAt(u uint32) *GenesisUserUpdateOne {
	guuo.mutation.ResetUpdateAt()
	guuo.mutation.SetUpdateAt(u)
	return guuo
}

// AddUpdateAt adds u to the "update_at" field.
func (guuo *GenesisUserUpdateOne) AddUpdateAt(u int32) *GenesisUserUpdateOne {
	guuo.mutation.AddUpdateAt(u)
	return guuo
}

// SetDeleteAt sets the "delete_at" field.
func (guuo *GenesisUserUpdateOne) SetDeleteAt(u uint32) *GenesisUserUpdateOne {
	guuo.mutation.ResetDeleteAt()
	guuo.mutation.SetDeleteAt(u)
	return guuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (guuo *GenesisUserUpdateOne) SetNillableDeleteAt(u *uint32) *GenesisUserUpdateOne {
	if u != nil {
		guuo.SetDeleteAt(*u)
	}
	return guuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (guuo *GenesisUserUpdateOne) AddDeleteAt(u int32) *GenesisUserUpdateOne {
	guuo.mutation.AddDeleteAt(u)
	return guuo
}

// Mutation returns the GenesisUserMutation object of the builder.
func (guuo *GenesisUserUpdateOne) Mutation() *GenesisUserMutation {
	return guuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guuo *GenesisUserUpdateOne) Select(field string, fields ...string) *GenesisUserUpdateOne {
	guuo.fields = append([]string{field}, fields...)
	return guuo
}

// Save executes the query and returns the updated GenesisUser entity.
func (guuo *GenesisUserUpdateOne) Save(ctx context.Context) (*GenesisUser, error) {
	var (
		err  error
		node *GenesisUser
	)
	guuo.defaults()
	if len(guuo.hooks) == 0 {
		node, err = guuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenesisUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guuo.mutation = mutation
			node, err = guuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guuo.hooks) - 1; i >= 0; i-- {
			if guuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GenesisUserUpdateOne) SaveX(ctx context.Context) *GenesisUser {
	node, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guuo *GenesisUserUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GenesisUserUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guuo *GenesisUserUpdateOne) defaults() {
	if _, ok := guuo.mutation.UpdateAt(); !ok {
		v := genesisuser.UpdateDefaultUpdateAt()
		guuo.mutation.SetUpdateAt(v)
	}
}

func (guuo *GenesisUserUpdateOne) sqlSave(ctx context.Context) (_node *GenesisUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   genesisuser.Table,
			Columns: genesisuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: genesisuser.FieldID,
			},
		},
	}
	id, ok := guuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GenesisUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, genesisuser.FieldID)
		for _, f := range fields {
			if !genesisuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != genesisuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: genesisuser.FieldUserID,
		})
	}
	if value, ok := guuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldCreateAt,
		})
	}
	if value, ok := guuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldCreateAt,
		})
	}
	if value, ok := guuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldUpdateAt,
		})
	}
	if value, ok := guuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldUpdateAt,
		})
	}
	if value, ok := guuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldDeleteAt,
		})
	}
	if value, ok := guuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldDeleteAt,
		})
	}
	_node = &GenesisUser{config: guuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{genesisuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
