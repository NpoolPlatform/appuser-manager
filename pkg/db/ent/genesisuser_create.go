// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/genesisuser"
	"github.com/google/uuid"
)

// GenesisUserCreate is the builder for creating a GenesisUser entity.
type GenesisUserCreate struct {
	config
	mutation *GenesisUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (guc *GenesisUserCreate) SetUserID(u uuid.UUID) *GenesisUserCreate {
	guc.mutation.SetUserID(u)
	return guc
}

// SetCreateAt sets the "create_at" field.
func (guc *GenesisUserCreate) SetCreateAt(u uint32) *GenesisUserCreate {
	guc.mutation.SetCreateAt(u)
	return guc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (guc *GenesisUserCreate) SetNillableCreateAt(u *uint32) *GenesisUserCreate {
	if u != nil {
		guc.SetCreateAt(*u)
	}
	return guc
}

// SetUpdateAt sets the "update_at" field.
func (guc *GenesisUserCreate) SetUpdateAt(u uint32) *GenesisUserCreate {
	guc.mutation.SetUpdateAt(u)
	return guc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (guc *GenesisUserCreate) SetNillableUpdateAt(u *uint32) *GenesisUserCreate {
	if u != nil {
		guc.SetUpdateAt(*u)
	}
	return guc
}

// SetDeleteAt sets the "delete_at" field.
func (guc *GenesisUserCreate) SetDeleteAt(u uint32) *GenesisUserCreate {
	guc.mutation.SetDeleteAt(u)
	return guc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (guc *GenesisUserCreate) SetNillableDeleteAt(u *uint32) *GenesisUserCreate {
	if u != nil {
		guc.SetDeleteAt(*u)
	}
	return guc
}

// SetID sets the "id" field.
func (guc *GenesisUserCreate) SetID(u uuid.UUID) *GenesisUserCreate {
	guc.mutation.SetID(u)
	return guc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (guc *GenesisUserCreate) SetNillableID(u *uuid.UUID) *GenesisUserCreate {
	if u != nil {
		guc.SetID(*u)
	}
	return guc
}

// Mutation returns the GenesisUserMutation object of the builder.
func (guc *GenesisUserCreate) Mutation() *GenesisUserMutation {
	return guc.mutation
}

// Save creates the GenesisUser in the database.
func (guc *GenesisUserCreate) Save(ctx context.Context) (*GenesisUser, error) {
	var (
		err  error
		node *GenesisUser
	)
	guc.defaults()
	if len(guc.hooks) == 0 {
		if err = guc.check(); err != nil {
			return nil, err
		}
		node, err = guc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GenesisUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guc.check(); err != nil {
				return nil, err
			}
			guc.mutation = mutation
			if node, err = guc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(guc.hooks) - 1; i >= 0; i-- {
			if guc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GenesisUserCreate) SaveX(ctx context.Context) *GenesisUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GenesisUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GenesisUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guc *GenesisUserCreate) defaults() {
	if _, ok := guc.mutation.CreateAt(); !ok {
		v := genesisuser.DefaultCreateAt()
		guc.mutation.SetCreateAt(v)
	}
	if _, ok := guc.mutation.UpdateAt(); !ok {
		v := genesisuser.DefaultUpdateAt()
		guc.mutation.SetUpdateAt(v)
	}
	if _, ok := guc.mutation.DeleteAt(); !ok {
		v := genesisuser.DefaultDeleteAt()
		guc.mutation.SetDeleteAt(v)
	}
	if _, ok := guc.mutation.ID(); !ok {
		v := genesisuser.DefaultID()
		guc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GenesisUserCreate) check() error {
	if _, ok := guc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GenesisUser.user_id"`)}
	}
	if _, ok := guc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "GenesisUser.create_at"`)}
	}
	if _, ok := guc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "GenesisUser.update_at"`)}
	}
	if _, ok := guc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "GenesisUser.delete_at"`)}
	}
	return nil
}

func (guc *GenesisUserCreate) sqlSave(ctx context.Context) (*GenesisUser, error) {
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (guc *GenesisUserCreate) createSpec() (*GenesisUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GenesisUser{config: guc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: genesisuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: genesisuser.FieldID,
			},
		}
	)
	_spec.OnConflict = guc.conflict
	if id, ok := guc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := guc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: genesisuser.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := guc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := guc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := guc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: genesisuser.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GenesisUser.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenesisUserUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (guc *GenesisUserCreate) OnConflict(opts ...sql.ConflictOption) *GenesisUserUpsertOne {
	guc.conflict = opts
	return &GenesisUserUpsertOne{
		create: guc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GenesisUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (guc *GenesisUserCreate) OnConflictColumns(columns ...string) *GenesisUserUpsertOne {
	guc.conflict = append(guc.conflict, sql.ConflictColumns(columns...))
	return &GenesisUserUpsertOne{
		create: guc,
	}
}

type (
	// GenesisUserUpsertOne is the builder for "upsert"-ing
	//  one GenesisUser node.
	GenesisUserUpsertOne struct {
		create *GenesisUserCreate
	}

	// GenesisUserUpsert is the "OnConflict" setter.
	GenesisUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *GenesisUserUpsert) SetUserID(v uuid.UUID) *GenesisUserUpsert {
	u.Set(genesisuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenesisUserUpsert) UpdateUserID() *GenesisUserUpsert {
	u.SetExcluded(genesisuser.FieldUserID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GenesisUserUpsert) SetCreateAt(v uint32) *GenesisUserUpsert {
	u.Set(genesisuser.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GenesisUserUpsert) UpdateCreateAt() *GenesisUserUpsert {
	u.SetExcluded(genesisuser.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *GenesisUserUpsert) AddCreateAt(v uint32) *GenesisUserUpsert {
	u.Add(genesisuser.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GenesisUserUpsert) SetUpdateAt(v uint32) *GenesisUserUpsert {
	u.Set(genesisuser.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GenesisUserUpsert) UpdateUpdateAt() *GenesisUserUpsert {
	u.SetExcluded(genesisuser.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GenesisUserUpsert) AddUpdateAt(v uint32) *GenesisUserUpsert {
	u.Add(genesisuser.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GenesisUserUpsert) SetDeleteAt(v uint32) *GenesisUserUpsert {
	u.Set(genesisuser.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GenesisUserUpsert) UpdateDeleteAt() *GenesisUserUpsert {
	u.SetExcluded(genesisuser.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GenesisUserUpsert) AddDeleteAt(v uint32) *GenesisUserUpsert {
	u.Add(genesisuser.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GenesisUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(genesisuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GenesisUserUpsertOne) UpdateNewValues() *GenesisUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(genesisuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GenesisUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GenesisUserUpsertOne) Ignore() *GenesisUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenesisUserUpsertOne) DoNothing() *GenesisUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenesisUserCreate.OnConflict
// documentation for more info.
func (u *GenesisUserUpsertOne) Update(set func(*GenesisUserUpsert)) *GenesisUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenesisUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *GenesisUserUpsertOne) SetUserID(v uuid.UUID) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenesisUserUpsertOne) UpdateUserID() *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateUserID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GenesisUserUpsertOne) SetCreateAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GenesisUserUpsertOne) AddCreateAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GenesisUserUpsertOne) UpdateCreateAt() *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GenesisUserUpsertOne) SetUpdateAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GenesisUserUpsertOne) AddUpdateAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GenesisUserUpsertOne) UpdateUpdateAt() *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GenesisUserUpsertOne) SetDeleteAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GenesisUserUpsertOne) AddDeleteAt(v uint32) *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GenesisUserUpsertOne) UpdateDeleteAt() *GenesisUserUpsertOne {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GenesisUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenesisUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenesisUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GenesisUserUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GenesisUserUpsertOne.ID is not supported by MySQL driver. Use GenesisUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GenesisUserUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GenesisUserCreateBulk is the builder for creating many GenesisUser entities in bulk.
type GenesisUserCreateBulk struct {
	config
	builders []*GenesisUserCreate
	conflict []sql.ConflictOption
}

// Save creates the GenesisUser entities in the database.
func (gucb *GenesisUserCreateBulk) Save(ctx context.Context) ([]*GenesisUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GenesisUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GenesisUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GenesisUserCreateBulk) SaveX(ctx context.Context) []*GenesisUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GenesisUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GenesisUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GenesisUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GenesisUserUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (gucb *GenesisUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *GenesisUserUpsertBulk {
	gucb.conflict = opts
	return &GenesisUserUpsertBulk{
		create: gucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GenesisUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gucb *GenesisUserCreateBulk) OnConflictColumns(columns ...string) *GenesisUserUpsertBulk {
	gucb.conflict = append(gucb.conflict, sql.ConflictColumns(columns...))
	return &GenesisUserUpsertBulk{
		create: gucb,
	}
}

// GenesisUserUpsertBulk is the builder for "upsert"-ing
// a bulk of GenesisUser nodes.
type GenesisUserUpsertBulk struct {
	create *GenesisUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GenesisUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(genesisuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GenesisUserUpsertBulk) UpdateNewValues() *GenesisUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(genesisuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GenesisUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GenesisUserUpsertBulk) Ignore() *GenesisUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GenesisUserUpsertBulk) DoNothing() *GenesisUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GenesisUserCreateBulk.OnConflict
// documentation for more info.
func (u *GenesisUserUpsertBulk) Update(set func(*GenesisUserUpsert)) *GenesisUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GenesisUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *GenesisUserUpsertBulk) SetUserID(v uuid.UUID) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GenesisUserUpsertBulk) UpdateUserID() *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateUserID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GenesisUserUpsertBulk) SetCreateAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GenesisUserUpsertBulk) AddCreateAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GenesisUserUpsertBulk) UpdateCreateAt() *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GenesisUserUpsertBulk) SetUpdateAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GenesisUserUpsertBulk) AddUpdateAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GenesisUserUpsertBulk) UpdateUpdateAt() *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GenesisUserUpsertBulk) SetDeleteAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GenesisUserUpsertBulk) AddDeleteAt(v uint32) *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GenesisUserUpsertBulk) UpdateDeleteAt() *GenesisUserUpsertBulk {
	return u.Update(func(s *GenesisUserUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GenesisUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GenesisUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GenesisUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GenesisUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
