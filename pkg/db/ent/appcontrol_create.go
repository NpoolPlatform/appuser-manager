// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appcontrol"
	"github.com/google/uuid"
)

// AppControlCreate is the builder for creating a AppControl entity.
type AppControlCreate struct {
	config
	mutation *AppControlMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (acc *AppControlCreate) SetAppID(u uuid.UUID) *AppControlCreate {
	acc.mutation.SetAppID(u)
	return acc
}

// SetSignupMethods sets the "signup_methods" field.
func (acc *AppControlCreate) SetSignupMethods(s []string) *AppControlCreate {
	acc.mutation.SetSignupMethods(s)
	return acc
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (acc *AppControlCreate) SetExternSigninMethods(s []string) *AppControlCreate {
	acc.mutation.SetExternSigninMethods(s)
	return acc
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (acc *AppControlCreate) SetRecaptchaMethod(s string) *AppControlCreate {
	acc.mutation.SetRecaptchaMethod(s)
	return acc
}

// SetKycEnable sets the "kyc_enable" field.
func (acc *AppControlCreate) SetKycEnable(b bool) *AppControlCreate {
	acc.mutation.SetKycEnable(b)
	return acc
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (acc *AppControlCreate) SetSigninVerifyEnable(b bool) *AppControlCreate {
	acc.mutation.SetSigninVerifyEnable(b)
	return acc
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (acc *AppControlCreate) SetInvitationCodeMust(b bool) *AppControlCreate {
	acc.mutation.SetInvitationCodeMust(b)
	return acc
}

// SetCreateAt sets the "create_at" field.
func (acc *AppControlCreate) SetCreateAt(u uint32) *AppControlCreate {
	acc.mutation.SetCreateAt(u)
	return acc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (acc *AppControlCreate) SetNillableCreateAt(u *uint32) *AppControlCreate {
	if u != nil {
		acc.SetCreateAt(*u)
	}
	return acc
}

// SetUpdateAt sets the "update_at" field.
func (acc *AppControlCreate) SetUpdateAt(u uint32) *AppControlCreate {
	acc.mutation.SetUpdateAt(u)
	return acc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (acc *AppControlCreate) SetNillableUpdateAt(u *uint32) *AppControlCreate {
	if u != nil {
		acc.SetUpdateAt(*u)
	}
	return acc
}

// SetDeleteAt sets the "delete_at" field.
func (acc *AppControlCreate) SetDeleteAt(u uint32) *AppControlCreate {
	acc.mutation.SetDeleteAt(u)
	return acc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (acc *AppControlCreate) SetNillableDeleteAt(u *uint32) *AppControlCreate {
	if u != nil {
		acc.SetDeleteAt(*u)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppControlCreate) SetID(u uuid.UUID) *AppControlCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AppControlCreate) SetNillableID(u *uuid.UUID) *AppControlCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// Mutation returns the AppControlMutation object of the builder.
func (acc *AppControlCreate) Mutation() *AppControlMutation {
	return acc.mutation
}

// Save creates the AppControl in the database.
func (acc *AppControlCreate) Save(ctx context.Context) (*AppControl, error) {
	var (
		err  error
		node *AppControl
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppControlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppControlCreate) SaveX(ctx context.Context) *AppControl {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppControlCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppControlCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppControlCreate) defaults() {
	if _, ok := acc.mutation.CreateAt(); !ok {
		v := appcontrol.DefaultCreateAt()
		acc.mutation.SetCreateAt(v)
	}
	if _, ok := acc.mutation.UpdateAt(); !ok {
		v := appcontrol.DefaultUpdateAt()
		acc.mutation.SetUpdateAt(v)
	}
	if _, ok := acc.mutation.DeleteAt(); !ok {
		v := appcontrol.DefaultDeleteAt()
		acc.mutation.SetDeleteAt(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := appcontrol.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppControlCreate) check() error {
	if _, ok := acc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppControl.app_id"`)}
	}
	if _, ok := acc.mutation.SignupMethods(); !ok {
		return &ValidationError{Name: "signup_methods", err: errors.New(`ent: missing required field "AppControl.signup_methods"`)}
	}
	if _, ok := acc.mutation.ExternSigninMethods(); !ok {
		return &ValidationError{Name: "extern_signin_methods", err: errors.New(`ent: missing required field "AppControl.extern_signin_methods"`)}
	}
	if _, ok := acc.mutation.RecaptchaMethod(); !ok {
		return &ValidationError{Name: "recaptcha_method", err: errors.New(`ent: missing required field "AppControl.recaptcha_method"`)}
	}
	if _, ok := acc.mutation.KycEnable(); !ok {
		return &ValidationError{Name: "kyc_enable", err: errors.New(`ent: missing required field "AppControl.kyc_enable"`)}
	}
	if _, ok := acc.mutation.SigninVerifyEnable(); !ok {
		return &ValidationError{Name: "signin_verify_enable", err: errors.New(`ent: missing required field "AppControl.signin_verify_enable"`)}
	}
	if _, ok := acc.mutation.InvitationCodeMust(); !ok {
		return &ValidationError{Name: "invitation_code_must", err: errors.New(`ent: missing required field "AppControl.invitation_code_must"`)}
	}
	if _, ok := acc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppControl.create_at"`)}
	}
	if _, ok := acc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppControl.update_at"`)}
	}
	if _, ok := acc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppControl.delete_at"`)}
	}
	return nil
}

func (acc *AppControlCreate) sqlSave(ctx context.Context) (*AppControl, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (acc *AppControlCreate) createSpec() (*AppControl, *sqlgraph.CreateSpec) {
	var (
		_node = &AppControl{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appcontrol.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcontrol.FieldID,
			},
		}
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcontrol.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := acc.mutation.SignupMethods(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appcontrol.FieldSignupMethods,
		})
		_node.SignupMethods = value
	}
	if value, ok := acc.mutation.ExternSigninMethods(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: appcontrol.FieldExternSigninMethods,
		})
		_node.ExternSigninMethods = value
	}
	if value, ok := acc.mutation.RecaptchaMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcontrol.FieldRecaptchaMethod,
		})
		_node.RecaptchaMethod = value
	}
	if value, ok := acc.mutation.KycEnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcontrol.FieldKycEnable,
		})
		_node.KycEnable = value
	}
	if value, ok := acc.mutation.SigninVerifyEnable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcontrol.FieldSigninVerifyEnable,
		})
		_node.SigninVerifyEnable = value
	}
	if value, ok := acc.mutation.InvitationCodeMust(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appcontrol.FieldInvitationCodeMust,
		})
		_node.InvitationCodeMust = value
	}
	if value, ok := acc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcontrol.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := acc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcontrol.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := acc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcontrol.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppControl.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppControlUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (acc *AppControlCreate) OnConflict(opts ...sql.ConflictOption) *AppControlUpsertOne {
	acc.conflict = opts
	return &AppControlUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acc *AppControlCreate) OnConflictColumns(columns ...string) *AppControlUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppControlUpsertOne{
		create: acc,
	}
}

type (
	// AppControlUpsertOne is the builder for "upsert"-ing
	//  one AppControl node.
	AppControlUpsertOne struct {
		create *AppControlCreate
	}

	// AppControlUpsert is the "OnConflict" setter.
	AppControlUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppControlUpsert) SetAppID(v uuid.UUID) *AppControlUpsert {
	u.Set(appcontrol.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateAppID() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldAppID)
	return u
}

// SetSignupMethods sets the "signup_methods" field.
func (u *AppControlUpsert) SetSignupMethods(v []string) *AppControlUpsert {
	u.Set(appcontrol.FieldSignupMethods, v)
	return u
}

// UpdateSignupMethods sets the "signup_methods" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateSignupMethods() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldSignupMethods)
	return u
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (u *AppControlUpsert) SetExternSigninMethods(v []string) *AppControlUpsert {
	u.Set(appcontrol.FieldExternSigninMethods, v)
	return u
}

// UpdateExternSigninMethods sets the "extern_signin_methods" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateExternSigninMethods() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldExternSigninMethods)
	return u
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (u *AppControlUpsert) SetRecaptchaMethod(v string) *AppControlUpsert {
	u.Set(appcontrol.FieldRecaptchaMethod, v)
	return u
}

// UpdateRecaptchaMethod sets the "recaptcha_method" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateRecaptchaMethod() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldRecaptchaMethod)
	return u
}

// SetKycEnable sets the "kyc_enable" field.
func (u *AppControlUpsert) SetKycEnable(v bool) *AppControlUpsert {
	u.Set(appcontrol.FieldKycEnable, v)
	return u
}

// UpdateKycEnable sets the "kyc_enable" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateKycEnable() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldKycEnable)
	return u
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (u *AppControlUpsert) SetSigninVerifyEnable(v bool) *AppControlUpsert {
	u.Set(appcontrol.FieldSigninVerifyEnable, v)
	return u
}

// UpdateSigninVerifyEnable sets the "signin_verify_enable" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateSigninVerifyEnable() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldSigninVerifyEnable)
	return u
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (u *AppControlUpsert) SetInvitationCodeMust(v bool) *AppControlUpsert {
	u.Set(appcontrol.FieldInvitationCodeMust, v)
	return u
}

// UpdateInvitationCodeMust sets the "invitation_code_must" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateInvitationCodeMust() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldInvitationCodeMust)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppControlUpsert) SetCreateAt(v uint32) *AppControlUpsert {
	u.Set(appcontrol.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateCreateAt() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppControlUpsert) AddCreateAt(v uint32) *AppControlUpsert {
	u.Add(appcontrol.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppControlUpsert) SetUpdateAt(v uint32) *AppControlUpsert {
	u.Set(appcontrol.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateUpdateAt() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppControlUpsert) AddUpdateAt(v uint32) *AppControlUpsert {
	u.Add(appcontrol.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppControlUpsert) SetDeleteAt(v uint32) *AppControlUpsert {
	u.Set(appcontrol.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppControlUpsert) UpdateDeleteAt() *AppControlUpsert {
	u.SetExcluded(appcontrol.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppControlUpsert) AddDeleteAt(v uint32) *AppControlUpsert {
	u.Add(appcontrol.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppControlUpsertOne) UpdateNewValues() *AppControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcontrol.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppControl.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppControlUpsertOne) Ignore() *AppControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppControlUpsertOne) DoNothing() *AppControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppControlCreate.OnConflict
// documentation for more info.
func (u *AppControlUpsertOne) Update(set func(*AppControlUpsert)) *AppControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppControlUpsertOne) SetAppID(v uuid.UUID) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateAppID() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateAppID()
	})
}

// SetSignupMethods sets the "signup_methods" field.
func (u *AppControlUpsertOne) SetSignupMethods(v []string) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetSignupMethods(v)
	})
}

// UpdateSignupMethods sets the "signup_methods" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateSignupMethods() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateSignupMethods()
	})
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (u *AppControlUpsertOne) SetExternSigninMethods(v []string) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetExternSigninMethods(v)
	})
}

// UpdateExternSigninMethods sets the "extern_signin_methods" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateExternSigninMethods() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateExternSigninMethods()
	})
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (u *AppControlUpsertOne) SetRecaptchaMethod(v string) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetRecaptchaMethod(v)
	})
}

// UpdateRecaptchaMethod sets the "recaptcha_method" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateRecaptchaMethod() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateRecaptchaMethod()
	})
}

// SetKycEnable sets the "kyc_enable" field.
func (u *AppControlUpsertOne) SetKycEnable(v bool) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetKycEnable(v)
	})
}

// UpdateKycEnable sets the "kyc_enable" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateKycEnable() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateKycEnable()
	})
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (u *AppControlUpsertOne) SetSigninVerifyEnable(v bool) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetSigninVerifyEnable(v)
	})
}

// UpdateSigninVerifyEnable sets the "signin_verify_enable" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateSigninVerifyEnable() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateSigninVerifyEnable()
	})
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (u *AppControlUpsertOne) SetInvitationCodeMust(v bool) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetInvitationCodeMust(v)
	})
}

// UpdateInvitationCodeMust sets the "invitation_code_must" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateInvitationCodeMust() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateInvitationCodeMust()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppControlUpsertOne) SetCreateAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppControlUpsertOne) AddCreateAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateCreateAt() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppControlUpsertOne) SetUpdateAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppControlUpsertOne) AddUpdateAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateUpdateAt() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppControlUpsertOne) SetDeleteAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppControlUpsertOne) AddDeleteAt(v uint32) *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppControlUpsertOne) UpdateDeleteAt() *AppControlUpsertOne {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppControlUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppControlCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppControlUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppControlUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppControlUpsertOne.ID is not supported by MySQL driver. Use AppControlUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppControlUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppControlCreateBulk is the builder for creating many AppControl entities in bulk.
type AppControlCreateBulk struct {
	config
	builders []*AppControlCreate
	conflict []sql.ConflictOption
}

// Save creates the AppControl entities in the database.
func (accb *AppControlCreateBulk) Save(ctx context.Context) ([]*AppControl, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppControl, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppControlCreateBulk) SaveX(ctx context.Context) []*AppControl {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppControlCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppControlCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppControl.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppControlUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (accb *AppControlCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppControlUpsertBulk {
	accb.conflict = opts
	return &AppControlUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (accb *AppControlCreateBulk) OnConflictColumns(columns ...string) *AppControlUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppControlUpsertBulk{
		create: accb,
	}
}

// AppControlUpsertBulk is the builder for "upsert"-ing
// a bulk of AppControl nodes.
type AppControlUpsertBulk struct {
	create *AppControlCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppControlUpsertBulk) UpdateNewValues() *AppControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcontrol.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppControl.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppControlUpsertBulk) Ignore() *AppControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppControlUpsertBulk) DoNothing() *AppControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppControlCreateBulk.OnConflict
// documentation for more info.
func (u *AppControlUpsertBulk) Update(set func(*AppControlUpsert)) *AppControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppControlUpsertBulk) SetAppID(v uuid.UUID) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateAppID() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateAppID()
	})
}

// SetSignupMethods sets the "signup_methods" field.
func (u *AppControlUpsertBulk) SetSignupMethods(v []string) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetSignupMethods(v)
	})
}

// UpdateSignupMethods sets the "signup_methods" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateSignupMethods() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateSignupMethods()
	})
}

// SetExternSigninMethods sets the "extern_signin_methods" field.
func (u *AppControlUpsertBulk) SetExternSigninMethods(v []string) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetExternSigninMethods(v)
	})
}

// UpdateExternSigninMethods sets the "extern_signin_methods" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateExternSigninMethods() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateExternSigninMethods()
	})
}

// SetRecaptchaMethod sets the "recaptcha_method" field.
func (u *AppControlUpsertBulk) SetRecaptchaMethod(v string) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetRecaptchaMethod(v)
	})
}

// UpdateRecaptchaMethod sets the "recaptcha_method" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateRecaptchaMethod() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateRecaptchaMethod()
	})
}

// SetKycEnable sets the "kyc_enable" field.
func (u *AppControlUpsertBulk) SetKycEnable(v bool) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetKycEnable(v)
	})
}

// UpdateKycEnable sets the "kyc_enable" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateKycEnable() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateKycEnable()
	})
}

// SetSigninVerifyEnable sets the "signin_verify_enable" field.
func (u *AppControlUpsertBulk) SetSigninVerifyEnable(v bool) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetSigninVerifyEnable(v)
	})
}

// UpdateSigninVerifyEnable sets the "signin_verify_enable" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateSigninVerifyEnable() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateSigninVerifyEnable()
	})
}

// SetInvitationCodeMust sets the "invitation_code_must" field.
func (u *AppControlUpsertBulk) SetInvitationCodeMust(v bool) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetInvitationCodeMust(v)
	})
}

// UpdateInvitationCodeMust sets the "invitation_code_must" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateInvitationCodeMust() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateInvitationCodeMust()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppControlUpsertBulk) SetCreateAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppControlUpsertBulk) AddCreateAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateCreateAt() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppControlUpsertBulk) SetUpdateAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppControlUpsertBulk) AddUpdateAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateUpdateAt() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppControlUpsertBulk) SetDeleteAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppControlUpsertBulk) AddDeleteAt(v uint32) *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppControlUpsertBulk) UpdateDeleteAt() *AppControlUpsertBulk {
	return u.Update(func(s *AppControlUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppControlUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppControlCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppControlCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppControlUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
