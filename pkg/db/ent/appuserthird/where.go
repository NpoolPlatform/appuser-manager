// Code generated by entc, DO NOT EDIT.

package appuserthird

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ThirdUserID applies equality check predicate on the "third_user_id" field. It's identical to ThirdUserIDEQ.
func ThirdUserID(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserID), v))
	})
}

// Third applies equality check predicate on the "third" field. It's identical to ThirdEQ.
func Third(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThird), v))
	})
}

// ThirdID applies equality check predicate on the "third_id" field. It's identical to ThirdIDEQ.
func ThirdID(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdID), v))
	})
}

// ThirdUserName applies equality check predicate on the "third_user_name" field. It's identical to ThirdUserNameEQ.
func ThirdUserName(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserAvatar applies equality check predicate on the "third_user_avatar" field. It's identical to ThirdUserAvatarEQ.
func ThirdUserAvatar(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserAvatar), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// ThirdUserIDEQ applies the EQ predicate on the "third_user_id" field.
func ThirdUserIDEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDNEQ applies the NEQ predicate on the "third_user_id" field.
func ThirdUserIDNEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDIn applies the In predicate on the "third_user_id" field.
func ThirdUserIDIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdUserID), v...))
	})
}

// ThirdUserIDNotIn applies the NotIn predicate on the "third_user_id" field.
func ThirdUserIDNotIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdUserID), v...))
	})
}

// ThirdUserIDGT applies the GT predicate on the "third_user_id" field.
func ThirdUserIDGT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDGTE applies the GTE predicate on the "third_user_id" field.
func ThirdUserIDGTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDLT applies the LT predicate on the "third_user_id" field.
func ThirdUserIDLT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDLTE applies the LTE predicate on the "third_user_id" field.
func ThirdUserIDLTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDContains applies the Contains predicate on the "third_user_id" field.
func ThirdUserIDContains(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDHasPrefix applies the HasPrefix predicate on the "third_user_id" field.
func ThirdUserIDHasPrefix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDHasSuffix applies the HasSuffix predicate on the "third_user_id" field.
func ThirdUserIDHasSuffix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDEqualFold applies the EqualFold predicate on the "third_user_id" field.
func ThirdUserIDEqualFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdUserID), v))
	})
}

// ThirdUserIDContainsFold applies the ContainsFold predicate on the "third_user_id" field.
func ThirdUserIDContainsFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdUserID), v))
	})
}

// ThirdEQ applies the EQ predicate on the "third" field.
func ThirdEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThird), v))
	})
}

// ThirdNEQ applies the NEQ predicate on the "third" field.
func ThirdNEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThird), v))
	})
}

// ThirdIn applies the In predicate on the "third" field.
func ThirdIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThird), v...))
	})
}

// ThirdNotIn applies the NotIn predicate on the "third" field.
func ThirdNotIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThird), v...))
	})
}

// ThirdGT applies the GT predicate on the "third" field.
func ThirdGT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThird), v))
	})
}

// ThirdGTE applies the GTE predicate on the "third" field.
func ThirdGTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThird), v))
	})
}

// ThirdLT applies the LT predicate on the "third" field.
func ThirdLT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThird), v))
	})
}

// ThirdLTE applies the LTE predicate on the "third" field.
func ThirdLTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThird), v))
	})
}

// ThirdContains applies the Contains predicate on the "third" field.
func ThirdContains(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThird), v))
	})
}

// ThirdHasPrefix applies the HasPrefix predicate on the "third" field.
func ThirdHasPrefix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThird), v))
	})
}

// ThirdHasSuffix applies the HasSuffix predicate on the "third" field.
func ThirdHasSuffix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThird), v))
	})
}

// ThirdEqualFold applies the EqualFold predicate on the "third" field.
func ThirdEqualFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThird), v))
	})
}

// ThirdContainsFold applies the ContainsFold predicate on the "third" field.
func ThirdContainsFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThird), v))
	})
}

// ThirdIDEQ applies the EQ predicate on the "third_id" field.
func ThirdIDEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdID), v))
	})
}

// ThirdIDNEQ applies the NEQ predicate on the "third_id" field.
func ThirdIDNEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdID), v))
	})
}

// ThirdIDIn applies the In predicate on the "third_id" field.
func ThirdIDIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdID), v...))
	})
}

// ThirdIDNotIn applies the NotIn predicate on the "third_id" field.
func ThirdIDNotIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdID), v...))
	})
}

// ThirdIDGT applies the GT predicate on the "third_id" field.
func ThirdIDGT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdID), v))
	})
}

// ThirdIDGTE applies the GTE predicate on the "third_id" field.
func ThirdIDGTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdID), v))
	})
}

// ThirdIDLT applies the LT predicate on the "third_id" field.
func ThirdIDLT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdID), v))
	})
}

// ThirdIDLTE applies the LTE predicate on the "third_id" field.
func ThirdIDLTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdID), v))
	})
}

// ThirdIDContains applies the Contains predicate on the "third_id" field.
func ThirdIDContains(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdID), v))
	})
}

// ThirdIDHasPrefix applies the HasPrefix predicate on the "third_id" field.
func ThirdIDHasPrefix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdID), v))
	})
}

// ThirdIDHasSuffix applies the HasSuffix predicate on the "third_id" field.
func ThirdIDHasSuffix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdID), v))
	})
}

// ThirdIDEqualFold applies the EqualFold predicate on the "third_id" field.
func ThirdIDEqualFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdID), v))
	})
}

// ThirdIDContainsFold applies the ContainsFold predicate on the "third_id" field.
func ThirdIDContainsFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdID), v))
	})
}

// ThirdUserNameEQ applies the EQ predicate on the "third_user_name" field.
func ThirdUserNameEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameNEQ applies the NEQ predicate on the "third_user_name" field.
func ThirdUserNameNEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameIn applies the In predicate on the "third_user_name" field.
func ThirdUserNameIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdUserName), v...))
	})
}

// ThirdUserNameNotIn applies the NotIn predicate on the "third_user_name" field.
func ThirdUserNameNotIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdUserName), v...))
	})
}

// ThirdUserNameGT applies the GT predicate on the "third_user_name" field.
func ThirdUserNameGT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameGTE applies the GTE predicate on the "third_user_name" field.
func ThirdUserNameGTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameLT applies the LT predicate on the "third_user_name" field.
func ThirdUserNameLT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameLTE applies the LTE predicate on the "third_user_name" field.
func ThirdUserNameLTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameContains applies the Contains predicate on the "third_user_name" field.
func ThirdUserNameContains(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameHasPrefix applies the HasPrefix predicate on the "third_user_name" field.
func ThirdUserNameHasPrefix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameHasSuffix applies the HasSuffix predicate on the "third_user_name" field.
func ThirdUserNameHasSuffix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameEqualFold applies the EqualFold predicate on the "third_user_name" field.
func ThirdUserNameEqualFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserNameContainsFold applies the ContainsFold predicate on the "third_user_name" field.
func ThirdUserNameContainsFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdUserName), v))
	})
}

// ThirdUserAvatarEQ applies the EQ predicate on the "third_user_avatar" field.
func ThirdUserAvatarEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarNEQ applies the NEQ predicate on the "third_user_avatar" field.
func ThirdUserAvatarNEQ(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarIn applies the In predicate on the "third_user_avatar" field.
func ThirdUserAvatarIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdUserAvatar), v...))
	})
}

// ThirdUserAvatarNotIn applies the NotIn predicate on the "third_user_avatar" field.
func ThirdUserAvatarNotIn(vs ...string) predicate.AppUserThird {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThird(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdUserAvatar), v...))
	})
}

// ThirdUserAvatarGT applies the GT predicate on the "third_user_avatar" field.
func ThirdUserAvatarGT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarGTE applies the GTE predicate on the "third_user_avatar" field.
func ThirdUserAvatarGTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarLT applies the LT predicate on the "third_user_avatar" field.
func ThirdUserAvatarLT(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarLTE applies the LTE predicate on the "third_user_avatar" field.
func ThirdUserAvatarLTE(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarContains applies the Contains predicate on the "third_user_avatar" field.
func ThirdUserAvatarContains(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarHasPrefix applies the HasPrefix predicate on the "third_user_avatar" field.
func ThirdUserAvatarHasPrefix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarHasSuffix applies the HasSuffix predicate on the "third_user_avatar" field.
func ThirdUserAvatarHasSuffix(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarEqualFold applies the EqualFold predicate on the "third_user_avatar" field.
func ThirdUserAvatarEqualFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdUserAvatar), v))
	})
}

// ThirdUserAvatarContainsFold applies the ContainsFold predicate on the "third_user_avatar" field.
func ThirdUserAvatarContainsFold(v string) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdUserAvatar), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUserThird) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUserThird) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUserThird) predicate.AppUserThird {
	return predicate.AppUserThird(func(s *sql.Selector) {
		p(s.Not())
	})
}
