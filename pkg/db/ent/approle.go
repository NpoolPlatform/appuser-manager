// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approle"
	"github.com/google/uuid"
)

// AppRole is the model entity for the AppRole schema.
type AppRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Default holds the value of the "default" field.
	Default bool `json:"default,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case approle.FieldDefault:
			values[i] = new(sql.NullBool)
		case approle.FieldCreateAt, approle.FieldUpdateAt, approle.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case approle.FieldRole, approle.FieldDescription:
			values[i] = new(sql.NullString)
		case approle.FieldID, approle.FieldCreatedBy, approle.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppRole fields.
func (ar *AppRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case approle.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				ar.CreatedBy = *value
			}
		case approle.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ar.Role = value.String
			}
		case approle.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ar.Description = value.String
			}
		case approle.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ar.AppID = *value
			}
		case approle.FieldDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				ar.Default = value.Bool
			}
		case approle.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ar.CreateAt = uint32(value.Int64)
			}
		case approle.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ar.UpdateAt = uint32(value.Int64)
			}
		case approle.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ar.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppRole.
// Note that you need to call AppRole.Unwrap() before calling this method if this AppRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AppRole) Update() *AppRoleUpdateOne {
	return (&AppRoleClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AppRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AppRole) Unwrap() *AppRole {
	tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppRole is not a transactional entity")
	}
	ar.config.driver = tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AppRole) String() string {
	var builder strings.Builder
	builder.WriteString("AppRole(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", ar.CreatedBy))
	builder.WriteString(", role=")
	builder.WriteString(ar.Role)
	builder.WriteString(", description=")
	builder.WriteString(ar.Description)
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ar.AppID))
	builder.WriteString(", default=")
	builder.WriteString(fmt.Sprintf("%v", ar.Default))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppRoles is a parsable slice of AppRole.
type AppRoles []*AppRole

func (ar AppRoles) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
