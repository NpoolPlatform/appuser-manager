// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appcontrol"
	"github.com/google/uuid"
)

// AppControl is the model entity for the AppControl schema.
type AppControl struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// SignupMethods holds the value of the "signup_methods" field.
	SignupMethods []string `json:"signup_methods,omitempty"`
	// ExternSigninMethods holds the value of the "extern_signin_methods" field.
	ExternSigninMethods []string `json:"extern_signin_methods,omitempty"`
	// RecaptchaMethod holds the value of the "recaptcha_method" field.
	RecaptchaMethod string `json:"recaptcha_method,omitempty"`
	// KycEnable holds the value of the "kyc_enable" field.
	KycEnable bool `json:"kyc_enable,omitempty"`
	// SigninVerifyEnable holds the value of the "signin_verify_enable" field.
	SigninVerifyEnable bool `json:"signin_verify_enable,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppControl) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appcontrol.FieldSignupMethods, appcontrol.FieldExternSigninMethods:
			values[i] = new([]byte)
		case appcontrol.FieldKycEnable, appcontrol.FieldSigninVerifyEnable:
			values[i] = new(sql.NullBool)
		case appcontrol.FieldCreateAt, appcontrol.FieldUpdateAt, appcontrol.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appcontrol.FieldRecaptchaMethod:
			values[i] = new(sql.NullString)
		case appcontrol.FieldID, appcontrol.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppControl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppControl fields.
func (ac *AppControl) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appcontrol.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ac.ID = *value
			}
		case appcontrol.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ac.AppID = *value
			}
		case appcontrol.FieldSignupMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field signup_methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ac.SignupMethods); err != nil {
					return fmt.Errorf("unmarshal field signup_methods: %w", err)
				}
			}
		case appcontrol.FieldExternSigninMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extern_signin_methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ac.ExternSigninMethods); err != nil {
					return fmt.Errorf("unmarshal field extern_signin_methods: %w", err)
				}
			}
		case appcontrol.FieldRecaptchaMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recaptcha_method", values[i])
			} else if value.Valid {
				ac.RecaptchaMethod = value.String
			}
		case appcontrol.FieldKycEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field kyc_enable", values[i])
			} else if value.Valid {
				ac.KycEnable = value.Bool
			}
		case appcontrol.FieldSigninVerifyEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field signin_verify_enable", values[i])
			} else if value.Valid {
				ac.SigninVerifyEnable = value.Bool
			}
		case appcontrol.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ac.CreateAt = uint32(value.Int64)
			}
		case appcontrol.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ac.UpdateAt = uint32(value.Int64)
			}
		case appcontrol.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ac.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppControl.
// Note that you need to call AppControl.Unwrap() before calling this method if this AppControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AppControl) Update() *AppControlUpdateOne {
	return (&AppControlClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the AppControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AppControl) Unwrap() *AppControl {
	tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppControl is not a transactional entity")
	}
	ac.config.driver = tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AppControl) String() string {
	var builder strings.Builder
	builder.WriteString("AppControl(")
	builder.WriteString(fmt.Sprintf("id=%v", ac.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ac.AppID))
	builder.WriteString(", signup_methods=")
	builder.WriteString(fmt.Sprintf("%v", ac.SignupMethods))
	builder.WriteString(", extern_signin_methods=")
	builder.WriteString(fmt.Sprintf("%v", ac.ExternSigninMethods))
	builder.WriteString(", recaptcha_method=")
	builder.WriteString(ac.RecaptchaMethod)
	builder.WriteString(", kyc_enable=")
	builder.WriteString(fmt.Sprintf("%v", ac.KycEnable))
	builder.WriteString(", signin_verify_enable=")
	builder.WriteString(fmt.Sprintf("%v", ac.SigninVerifyEnable))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ac.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppControls is a parsable slice of AppControl.
type AppControls []*AppControl

func (ac AppControls) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
