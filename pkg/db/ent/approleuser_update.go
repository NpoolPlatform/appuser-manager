// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/approleuser"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppRoleUserUpdate is the builder for updating AppRoleUser entities.
type AppRoleUserUpdate struct {
	config
	hooks    []Hook
	mutation *AppRoleUserMutation
}

// Where appends a list predicates to the AppRoleUserUpdate builder.
func (aruu *AppRoleUserUpdate) Where(ps ...predicate.AppRoleUser) *AppRoleUserUpdate {
	aruu.mutation.Where(ps...)
	return aruu
}

// SetAppID sets the "app_id" field.
func (aruu *AppRoleUserUpdate) SetAppID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetAppID(u)
	return aruu
}

// SetRoleID sets the "role_id" field.
func (aruu *AppRoleUserUpdate) SetRoleID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetRoleID(u)
	return aruu
}

// SetUserID sets the "user_id" field.
func (aruu *AppRoleUserUpdate) SetUserID(u uuid.UUID) *AppRoleUserUpdate {
	aruu.mutation.SetUserID(u)
	return aruu
}

// SetCreateAt sets the "create_at" field.
func (aruu *AppRoleUserUpdate) SetCreateAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetCreateAt()
	aruu.mutation.SetCreateAt(u)
	return aruu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aruu *AppRoleUserUpdate) SetNillableCreateAt(u *uint32) *AppRoleUserUpdate {
	if u != nil {
		aruu.SetCreateAt(*u)
	}
	return aruu
}

// AddCreateAt adds u to the "create_at" field.
func (aruu *AppRoleUserUpdate) AddCreateAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddCreateAt(u)
	return aruu
}

// SetUpdateAt sets the "update_at" field.
func (aruu *AppRoleUserUpdate) SetUpdateAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetUpdateAt()
	aruu.mutation.SetUpdateAt(u)
	return aruu
}

// AddUpdateAt adds u to the "update_at" field.
func (aruu *AppRoleUserUpdate) AddUpdateAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddUpdateAt(u)
	return aruu
}

// SetDeleteAt sets the "delete_at" field.
func (aruu *AppRoleUserUpdate) SetDeleteAt(u uint32) *AppRoleUserUpdate {
	aruu.mutation.ResetDeleteAt()
	aruu.mutation.SetDeleteAt(u)
	return aruu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aruu *AppRoleUserUpdate) SetNillableDeleteAt(u *uint32) *AppRoleUserUpdate {
	if u != nil {
		aruu.SetDeleteAt(*u)
	}
	return aruu
}

// AddDeleteAt adds u to the "delete_at" field.
func (aruu *AppRoleUserUpdate) AddDeleteAt(u int32) *AppRoleUserUpdate {
	aruu.mutation.AddDeleteAt(u)
	return aruu
}

// Mutation returns the AppRoleUserMutation object of the builder.
func (aruu *AppRoleUserUpdate) Mutation() *AppRoleUserMutation {
	return aruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aruu *AppRoleUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aruu.defaults()
	if len(aruu.hooks) == 0 {
		affected, err = aruu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruu.mutation = mutation
			affected, err = aruu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aruu.hooks) - 1; i >= 0; i-- {
			if aruu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruu *AppRoleUserUpdate) SaveX(ctx context.Context) int {
	affected, err := aruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aruu *AppRoleUserUpdate) Exec(ctx context.Context) error {
	_, err := aruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruu *AppRoleUserUpdate) ExecX(ctx context.Context) {
	if err := aruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruu *AppRoleUserUpdate) defaults() {
	if _, ok := aruu.mutation.UpdateAt(); !ok {
		v := approleuser.UpdateDefaultUpdateAt()
		aruu.mutation.SetUpdateAt(v)
	}
}

func (aruu *AppRoleUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleuser.FieldID,
			},
		},
	}
	if ps := aruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldAppID,
		})
	}
	if value, ok := aruu.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldRoleID,
		})
	}
	if value, ok := aruu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldUserID,
		})
	}
	if value, ok := aruu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreateAt,
		})
	}
	if value, ok := aruu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreateAt,
		})
	}
	if value, ok := aruu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdateAt,
		})
	}
	if value, ok := aruu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdateAt,
		})
	}
	if value, ok := aruu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeleteAt,
		})
	}
	if value, ok := aruu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppRoleUserUpdateOne is the builder for updating a single AppRoleUser entity.
type AppRoleUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppRoleUserMutation
}

// SetAppID sets the "app_id" field.
func (aruuo *AppRoleUserUpdateOne) SetAppID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetAppID(u)
	return aruuo
}

// SetRoleID sets the "role_id" field.
func (aruuo *AppRoleUserUpdateOne) SetRoleID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetRoleID(u)
	return aruuo
}

// SetUserID sets the "user_id" field.
func (aruuo *AppRoleUserUpdateOne) SetUserID(u uuid.UUID) *AppRoleUserUpdateOne {
	aruuo.mutation.SetUserID(u)
	return aruuo
}

// SetCreateAt sets the "create_at" field.
func (aruuo *AppRoleUserUpdateOne) SetCreateAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetCreateAt()
	aruuo.mutation.SetCreateAt(u)
	return aruuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aruuo *AppRoleUserUpdateOne) SetNillableCreateAt(u *uint32) *AppRoleUserUpdateOne {
	if u != nil {
		aruuo.SetCreateAt(*u)
	}
	return aruuo
}

// AddCreateAt adds u to the "create_at" field.
func (aruuo *AppRoleUserUpdateOne) AddCreateAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddCreateAt(u)
	return aruuo
}

// SetUpdateAt sets the "update_at" field.
func (aruuo *AppRoleUserUpdateOne) SetUpdateAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetUpdateAt()
	aruuo.mutation.SetUpdateAt(u)
	return aruuo
}

// AddUpdateAt adds u to the "update_at" field.
func (aruuo *AppRoleUserUpdateOne) AddUpdateAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddUpdateAt(u)
	return aruuo
}

// SetDeleteAt sets the "delete_at" field.
func (aruuo *AppRoleUserUpdateOne) SetDeleteAt(u uint32) *AppRoleUserUpdateOne {
	aruuo.mutation.ResetDeleteAt()
	aruuo.mutation.SetDeleteAt(u)
	return aruuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aruuo *AppRoleUserUpdateOne) SetNillableDeleteAt(u *uint32) *AppRoleUserUpdateOne {
	if u != nil {
		aruuo.SetDeleteAt(*u)
	}
	return aruuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (aruuo *AppRoleUserUpdateOne) AddDeleteAt(u int32) *AppRoleUserUpdateOne {
	aruuo.mutation.AddDeleteAt(u)
	return aruuo
}

// Mutation returns the AppRoleUserMutation object of the builder.
func (aruuo *AppRoleUserUpdateOne) Mutation() *AppRoleUserMutation {
	return aruuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruuo *AppRoleUserUpdateOne) Select(field string, fields ...string) *AppRoleUserUpdateOne {
	aruuo.fields = append([]string{field}, fields...)
	return aruuo
}

// Save executes the query and returns the updated AppRoleUser entity.
func (aruuo *AppRoleUserUpdateOne) Save(ctx context.Context) (*AppRoleUser, error) {
	var (
		err  error
		node *AppRoleUser
	)
	aruuo.defaults()
	if len(aruuo.hooks) == 0 {
		node, err = aruuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppRoleUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruuo.mutation = mutation
			node, err = aruuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruuo.hooks) - 1; i >= 0; i-- {
			if aruuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruuo *AppRoleUserUpdateOne) SaveX(ctx context.Context) *AppRoleUser {
	node, err := aruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruuo *AppRoleUserUpdateOne) Exec(ctx context.Context) error {
	_, err := aruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruuo *AppRoleUserUpdateOne) ExecX(ctx context.Context) {
	if err := aruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruuo *AppRoleUserUpdateOne) defaults() {
	if _, ok := aruuo.mutation.UpdateAt(); !ok {
		v := approleuser.UpdateDefaultUpdateAt()
		aruuo.mutation.SetUpdateAt(v)
	}
}

func (aruuo *AppRoleUserUpdateOne) sqlSave(ctx context.Context) (_node *AppRoleUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   approleuser.Table,
			Columns: approleuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: approleuser.FieldID,
			},
		},
	}
	id, ok := aruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRoleUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approleuser.FieldID)
		for _, f := range fields {
			if !approleuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approleuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldAppID,
		})
	}
	if value, ok := aruuo.mutation.RoleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldRoleID,
		})
	}
	if value, ok := aruuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: approleuser.FieldUserID,
		})
	}
	if value, ok := aruuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreateAt,
		})
	}
	if value, ok := aruuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldCreateAt,
		})
	}
	if value, ok := aruuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdateAt,
		})
	}
	if value, ok := aruuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldUpdateAt,
		})
	}
	if value, ok := aruuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeleteAt,
		})
	}
	if value, ok := aruuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: approleuser.FieldDeleteAt,
		})
	}
	_node = &AppRoleUser{config: aruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
