// Code generated by entc, DO NOT EDIT.

package appuserthirdparty

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ThirdPartyUserID applies equality check predicate on the "third_party_user_id" field. It's identical to ThirdPartyUserIDEQ.
func ThirdPartyUserID(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyID applies equality check predicate on the "third_party_id" field. It's identical to ThirdPartyIDEQ.
func ThirdPartyID(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyUserName applies equality check predicate on the "third_party_user_name" field. It's identical to ThirdPartyUserNameEQ.
func ThirdPartyUserName(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserAvatar applies equality check predicate on the "third_party_user_avatar" field. It's identical to ThirdPartyUserAvatarEQ.
func ThirdPartyUserAvatar(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// ThirdPartyUserIDEQ applies the EQ predicate on the "third_party_user_id" field.
func ThirdPartyUserIDEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDNEQ applies the NEQ predicate on the "third_party_user_id" field.
func ThirdPartyUserIDNEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDIn applies the In predicate on the "third_party_user_id" field.
func ThirdPartyUserIDIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdPartyUserID), v...))
	})
}

// ThirdPartyUserIDNotIn applies the NotIn predicate on the "third_party_user_id" field.
func ThirdPartyUserIDNotIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdPartyUserID), v...))
	})
}

// ThirdPartyUserIDGT applies the GT predicate on the "third_party_user_id" field.
func ThirdPartyUserIDGT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDGTE applies the GTE predicate on the "third_party_user_id" field.
func ThirdPartyUserIDGTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDLT applies the LT predicate on the "third_party_user_id" field.
func ThirdPartyUserIDLT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDLTE applies the LTE predicate on the "third_party_user_id" field.
func ThirdPartyUserIDLTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDContains applies the Contains predicate on the "third_party_user_id" field.
func ThirdPartyUserIDContains(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDHasPrefix applies the HasPrefix predicate on the "third_party_user_id" field.
func ThirdPartyUserIDHasPrefix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDHasSuffix applies the HasSuffix predicate on the "third_party_user_id" field.
func ThirdPartyUserIDHasSuffix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDEqualFold applies the EqualFold predicate on the "third_party_user_id" field.
func ThirdPartyUserIDEqualFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyUserIDContainsFold applies the ContainsFold predicate on the "third_party_user_id" field.
func ThirdPartyUserIDContainsFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPartyUserID), v))
	})
}

// ThirdPartyIDEQ applies the EQ predicate on the "third_party_id" field.
func ThirdPartyIDEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDNEQ applies the NEQ predicate on the "third_party_id" field.
func ThirdPartyIDNEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDIn applies the In predicate on the "third_party_id" field.
func ThirdPartyIDIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdPartyID), v...))
	})
}

// ThirdPartyIDNotIn applies the NotIn predicate on the "third_party_id" field.
func ThirdPartyIDNotIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdPartyID), v...))
	})
}

// ThirdPartyIDGT applies the GT predicate on the "third_party_id" field.
func ThirdPartyIDGT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDGTE applies the GTE predicate on the "third_party_id" field.
func ThirdPartyIDGTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDLT applies the LT predicate on the "third_party_id" field.
func ThirdPartyIDLT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDLTE applies the LTE predicate on the "third_party_id" field.
func ThirdPartyIDLTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDContains applies the Contains predicate on the "third_party_id" field.
func ThirdPartyIDContains(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDHasPrefix applies the HasPrefix predicate on the "third_party_id" field.
func ThirdPartyIDHasPrefix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDHasSuffix applies the HasSuffix predicate on the "third_party_id" field.
func ThirdPartyIDHasSuffix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDEqualFold applies the EqualFold predicate on the "third_party_id" field.
func ThirdPartyIDEqualFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyIDContainsFold applies the ContainsFold predicate on the "third_party_id" field.
func ThirdPartyIDContainsFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPartyID), v))
	})
}

// ThirdPartyUserNameEQ applies the EQ predicate on the "third_party_user_name" field.
func ThirdPartyUserNameEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameNEQ applies the NEQ predicate on the "third_party_user_name" field.
func ThirdPartyUserNameNEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameIn applies the In predicate on the "third_party_user_name" field.
func ThirdPartyUserNameIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdPartyUserName), v...))
	})
}

// ThirdPartyUserNameNotIn applies the NotIn predicate on the "third_party_user_name" field.
func ThirdPartyUserNameNotIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdPartyUserName), v...))
	})
}

// ThirdPartyUserNameGT applies the GT predicate on the "third_party_user_name" field.
func ThirdPartyUserNameGT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameGTE applies the GTE predicate on the "third_party_user_name" field.
func ThirdPartyUserNameGTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameLT applies the LT predicate on the "third_party_user_name" field.
func ThirdPartyUserNameLT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameLTE applies the LTE predicate on the "third_party_user_name" field.
func ThirdPartyUserNameLTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameContains applies the Contains predicate on the "third_party_user_name" field.
func ThirdPartyUserNameContains(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameHasPrefix applies the HasPrefix predicate on the "third_party_user_name" field.
func ThirdPartyUserNameHasPrefix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameHasSuffix applies the HasSuffix predicate on the "third_party_user_name" field.
func ThirdPartyUserNameHasSuffix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameEqualFold applies the EqualFold predicate on the "third_party_user_name" field.
func ThirdPartyUserNameEqualFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserNameContainsFold applies the ContainsFold predicate on the "third_party_user_name" field.
func ThirdPartyUserNameContainsFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPartyUserName), v))
	})
}

// ThirdPartyUserAvatarEQ applies the EQ predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarNEQ applies the NEQ predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarNEQ(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarIn applies the In predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdPartyUserAvatar), v...))
	})
}

// ThirdPartyUserAvatarNotIn applies the NotIn predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarNotIn(vs ...string) predicate.AppUserThirdParty {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdPartyUserAvatar), v...))
	})
}

// ThirdPartyUserAvatarGT applies the GT predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarGT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarGTE applies the GTE predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarGTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarLT applies the LT predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarLT(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarLTE applies the LTE predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarLTE(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarContains applies the Contains predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarContains(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarHasPrefix applies the HasPrefix predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarHasPrefix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarHasSuffix applies the HasSuffix predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarHasSuffix(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarEqualFold applies the EqualFold predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarEqualFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// ThirdPartyUserAvatarContainsFold applies the ContainsFold predicate on the "third_party_user_avatar" field.
func ThirdPartyUserAvatarContainsFold(v string) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdPartyUserAvatar), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppUserThirdParty) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppUserThirdParty) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppUserThirdParty) predicate.AppUserThirdParty {
	return predicate.AppUserThirdParty(func(s *sql.Selector) {
		p(s.Not())
	})
}
