// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/appuserthird"
	"github.com/NpoolPlatform/appuser-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppUserThirdUpdate is the builder for updating AppUserThird entities.
type AppUserThirdUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserThirdMutation
}

// Where appends a list predicates to the AppUserThirdUpdate builder.
func (autu *AppUserThirdUpdate) Where(ps ...predicate.AppUserThird) *AppUserThirdUpdate {
	autu.mutation.Where(ps...)
	return autu
}

// SetCreateAt sets the "create_at" field.
func (autu *AppUserThirdUpdate) SetCreateAt(u uint32) *AppUserThirdUpdate {
	autu.mutation.ResetCreateAt()
	autu.mutation.SetCreateAt(u)
	return autu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (autu *AppUserThirdUpdate) SetNillableCreateAt(u *uint32) *AppUserThirdUpdate {
	if u != nil {
		autu.SetCreateAt(*u)
	}
	return autu
}

// AddCreateAt adds u to the "create_at" field.
func (autu *AppUserThirdUpdate) AddCreateAt(u int32) *AppUserThirdUpdate {
	autu.mutation.AddCreateAt(u)
	return autu
}

// SetUpdateAt sets the "update_at" field.
func (autu *AppUserThirdUpdate) SetUpdateAt(u uint32) *AppUserThirdUpdate {
	autu.mutation.ResetUpdateAt()
	autu.mutation.SetUpdateAt(u)
	return autu
}

// AddUpdateAt adds u to the "update_at" field.
func (autu *AppUserThirdUpdate) AddUpdateAt(u int32) *AppUserThirdUpdate {
	autu.mutation.AddUpdateAt(u)
	return autu
}

// SetDeleteAt sets the "delete_at" field.
func (autu *AppUserThirdUpdate) SetDeleteAt(u uint32) *AppUserThirdUpdate {
	autu.mutation.ResetDeleteAt()
	autu.mutation.SetDeleteAt(u)
	return autu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (autu *AppUserThirdUpdate) SetNillableDeleteAt(u *uint32) *AppUserThirdUpdate {
	if u != nil {
		autu.SetDeleteAt(*u)
	}
	return autu
}

// AddDeleteAt adds u to the "delete_at" field.
func (autu *AppUserThirdUpdate) AddDeleteAt(u int32) *AppUserThirdUpdate {
	autu.mutation.AddDeleteAt(u)
	return autu
}

// SetAppID sets the "app_id" field.
func (autu *AppUserThirdUpdate) SetAppID(u uuid.UUID) *AppUserThirdUpdate {
	autu.mutation.SetAppID(u)
	return autu
}

// SetUserID sets the "user_id" field.
func (autu *AppUserThirdUpdate) SetUserID(u uuid.UUID) *AppUserThirdUpdate {
	autu.mutation.SetUserID(u)
	return autu
}

// SetThirdUserID sets the "third_user_id" field.
func (autu *AppUserThirdUpdate) SetThirdUserID(s string) *AppUserThirdUpdate {
	autu.mutation.SetThirdUserID(s)
	return autu
}

// SetThird sets the "third" field.
func (autu *AppUserThirdUpdate) SetThird(a appuserthird.Third) *AppUserThirdUpdate {
	autu.mutation.SetThird(a)
	return autu
}

// SetThirdID sets the "third_id" field.
func (autu *AppUserThirdUpdate) SetThirdID(s string) *AppUserThirdUpdate {
	autu.mutation.SetThirdID(s)
	return autu
}

// SetThirdUserName sets the "third_user_name" field.
func (autu *AppUserThirdUpdate) SetThirdUserName(s string) *AppUserThirdUpdate {
	autu.mutation.SetThirdUserName(s)
	return autu
}

// SetThirdUserPicture sets the "third_user_picture" field.
func (autu *AppUserThirdUpdate) SetThirdUserPicture(s string) *AppUserThirdUpdate {
	autu.mutation.SetThirdUserPicture(s)
	return autu
}

// Mutation returns the AppUserThirdMutation object of the builder.
func (autu *AppUserThirdUpdate) Mutation() *AppUserThirdMutation {
	return autu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (autu *AppUserThirdUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := autu.defaults(); err != nil {
		return 0, err
	}
	if len(autu.hooks) == 0 {
		if err = autu.check(); err != nil {
			return 0, err
		}
		affected, err = autu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserThirdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autu.check(); err != nil {
				return 0, err
			}
			autu.mutation = mutation
			affected, err = autu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(autu.hooks) - 1; i >= 0; i-- {
			if autu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (autu *AppUserThirdUpdate) SaveX(ctx context.Context) int {
	affected, err := autu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (autu *AppUserThirdUpdate) Exec(ctx context.Context) error {
	_, err := autu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autu *AppUserThirdUpdate) ExecX(ctx context.Context) {
	if err := autu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autu *AppUserThirdUpdate) defaults() error {
	if _, ok := autu.mutation.UpdateAt(); !ok {
		if appuserthird.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized appuserthird.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := appuserthird.UpdateDefaultUpdateAt()
		autu.mutation.SetUpdateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (autu *AppUserThirdUpdate) check() error {
	if v, ok := autu.mutation.Third(); ok {
		if err := appuserthird.ThirdValidator(v); err != nil {
			return &ValidationError{Name: "third", err: fmt.Errorf(`ent: validator failed for field "AppUserThird.third": %w`, err)}
		}
	}
	return nil
}

func (autu *AppUserThirdUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserthird.Table,
			Columns: appuserthird.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserthird.FieldID,
			},
		},
	}
	if ps := autu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldCreateAt,
		})
	}
	if value, ok := autu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldCreateAt,
		})
	}
	if value, ok := autu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldUpdateAt,
		})
	}
	if value, ok := autu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldUpdateAt,
		})
	}
	if value, ok := autu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldDeleteAt,
		})
	}
	if value, ok := autu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldDeleteAt,
		})
	}
	if value, ok := autu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserthird.FieldAppID,
		})
	}
	if value, ok := autu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserthird.FieldUserID,
		})
	}
	if value, ok := autu.mutation.ThirdUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserID,
		})
	}
	if value, ok := autu.mutation.Third(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appuserthird.FieldThird,
		})
	}
	if value, ok := autu.mutation.ThirdID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdID,
		})
	}
	if value, ok := autu.mutation.ThirdUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserName,
		})
	}
	if value, ok := autu.mutation.ThirdUserPicture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserPicture,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, autu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserthird.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserThirdUpdateOne is the builder for updating a single AppUserThird entity.
type AppUserThirdUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserThirdMutation
}

// SetCreateAt sets the "create_at" field.
func (autuo *AppUserThirdUpdateOne) SetCreateAt(u uint32) *AppUserThirdUpdateOne {
	autuo.mutation.ResetCreateAt()
	autuo.mutation.SetCreateAt(u)
	return autuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (autuo *AppUserThirdUpdateOne) SetNillableCreateAt(u *uint32) *AppUserThirdUpdateOne {
	if u != nil {
		autuo.SetCreateAt(*u)
	}
	return autuo
}

// AddCreateAt adds u to the "create_at" field.
func (autuo *AppUserThirdUpdateOne) AddCreateAt(u int32) *AppUserThirdUpdateOne {
	autuo.mutation.AddCreateAt(u)
	return autuo
}

// SetUpdateAt sets the "update_at" field.
func (autuo *AppUserThirdUpdateOne) SetUpdateAt(u uint32) *AppUserThirdUpdateOne {
	autuo.mutation.ResetUpdateAt()
	autuo.mutation.SetUpdateAt(u)
	return autuo
}

// AddUpdateAt adds u to the "update_at" field.
func (autuo *AppUserThirdUpdateOne) AddUpdateAt(u int32) *AppUserThirdUpdateOne {
	autuo.mutation.AddUpdateAt(u)
	return autuo
}

// SetDeleteAt sets the "delete_at" field.
func (autuo *AppUserThirdUpdateOne) SetDeleteAt(u uint32) *AppUserThirdUpdateOne {
	autuo.mutation.ResetDeleteAt()
	autuo.mutation.SetDeleteAt(u)
	return autuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (autuo *AppUserThirdUpdateOne) SetNillableDeleteAt(u *uint32) *AppUserThirdUpdateOne {
	if u != nil {
		autuo.SetDeleteAt(*u)
	}
	return autuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (autuo *AppUserThirdUpdateOne) AddDeleteAt(u int32) *AppUserThirdUpdateOne {
	autuo.mutation.AddDeleteAt(u)
	return autuo
}

// SetAppID sets the "app_id" field.
func (autuo *AppUserThirdUpdateOne) SetAppID(u uuid.UUID) *AppUserThirdUpdateOne {
	autuo.mutation.SetAppID(u)
	return autuo
}

// SetUserID sets the "user_id" field.
func (autuo *AppUserThirdUpdateOne) SetUserID(u uuid.UUID) *AppUserThirdUpdateOne {
	autuo.mutation.SetUserID(u)
	return autuo
}

// SetThirdUserID sets the "third_user_id" field.
func (autuo *AppUserThirdUpdateOne) SetThirdUserID(s string) *AppUserThirdUpdateOne {
	autuo.mutation.SetThirdUserID(s)
	return autuo
}

// SetThird sets the "third" field.
func (autuo *AppUserThirdUpdateOne) SetThird(a appuserthird.Third) *AppUserThirdUpdateOne {
	autuo.mutation.SetThird(a)
	return autuo
}

// SetThirdID sets the "third_id" field.
func (autuo *AppUserThirdUpdateOne) SetThirdID(s string) *AppUserThirdUpdateOne {
	autuo.mutation.SetThirdID(s)
	return autuo
}

// SetThirdUserName sets the "third_user_name" field.
func (autuo *AppUserThirdUpdateOne) SetThirdUserName(s string) *AppUserThirdUpdateOne {
	autuo.mutation.SetThirdUserName(s)
	return autuo
}

// SetThirdUserPicture sets the "third_user_picture" field.
func (autuo *AppUserThirdUpdateOne) SetThirdUserPicture(s string) *AppUserThirdUpdateOne {
	autuo.mutation.SetThirdUserPicture(s)
	return autuo
}

// Mutation returns the AppUserThirdMutation object of the builder.
func (autuo *AppUserThirdUpdateOne) Mutation() *AppUserThirdMutation {
	return autuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (autuo *AppUserThirdUpdateOne) Select(field string, fields ...string) *AppUserThirdUpdateOne {
	autuo.fields = append([]string{field}, fields...)
	return autuo
}

// Save executes the query and returns the updated AppUserThird entity.
func (autuo *AppUserThirdUpdateOne) Save(ctx context.Context) (*AppUserThird, error) {
	var (
		err  error
		node *AppUserThird
	)
	if err := autuo.defaults(); err != nil {
		return nil, err
	}
	if len(autuo.hooks) == 0 {
		if err = autuo.check(); err != nil {
			return nil, err
		}
		node, err = autuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserThirdMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = autuo.check(); err != nil {
				return nil, err
			}
			autuo.mutation = mutation
			node, err = autuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(autuo.hooks) - 1; i >= 0; i-- {
			if autuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = autuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, autuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (autuo *AppUserThirdUpdateOne) SaveX(ctx context.Context) *AppUserThird {
	node, err := autuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (autuo *AppUserThirdUpdateOne) Exec(ctx context.Context) error {
	_, err := autuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (autuo *AppUserThirdUpdateOne) ExecX(ctx context.Context) {
	if err := autuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (autuo *AppUserThirdUpdateOne) defaults() error {
	if _, ok := autuo.mutation.UpdateAt(); !ok {
		if appuserthird.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized appuserthird.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := appuserthird.UpdateDefaultUpdateAt()
		autuo.mutation.SetUpdateAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (autuo *AppUserThirdUpdateOne) check() error {
	if v, ok := autuo.mutation.Third(); ok {
		if err := appuserthird.ThirdValidator(v); err != nil {
			return &ValidationError{Name: "third", err: fmt.Errorf(`ent: validator failed for field "AppUserThird.third": %w`, err)}
		}
	}
	return nil
}

func (autuo *AppUserThirdUpdateOne) sqlSave(ctx context.Context) (_node *AppUserThird, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuserthird.Table,
			Columns: appuserthird.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuserthird.FieldID,
			},
		},
	}
	id, ok := autuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppUserThird.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := autuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuserthird.FieldID)
		for _, f := range fields {
			if !appuserthird.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuserthird.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := autuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := autuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldCreateAt,
		})
	}
	if value, ok := autuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldCreateAt,
		})
	}
	if value, ok := autuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldUpdateAt,
		})
	}
	if value, ok := autuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldUpdateAt,
		})
	}
	if value, ok := autuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldDeleteAt,
		})
	}
	if value, ok := autuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuserthird.FieldDeleteAt,
		})
	}
	if value, ok := autuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserthird.FieldAppID,
		})
	}
	if value, ok := autuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuserthird.FieldUserID,
		})
	}
	if value, ok := autuo.mutation.ThirdUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserID,
		})
	}
	if value, ok := autuo.mutation.Third(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appuserthird.FieldThird,
		})
	}
	if value, ok := autuo.mutation.ThirdID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdID,
		})
	}
	if value, ok := autuo.mutation.ThirdUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserName,
		})
	}
	if value, ok := autuo.mutation.ThirdUserPicture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuserthird.FieldThirdUserPicture,
		})
	}
	_node = &AppUserThird{config: autuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, autuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuserthird.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
